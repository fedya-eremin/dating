from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.filters.command import Command
from bot.config import dp, bot, API_URL
from bot.handlers.states import ProfileStates
import requests
from bot.logger import logger
import os

@dp.message(Command("edit"))
async def edit_profile(message: types.Message, state: FSMContext):
    await message.answer(
        "üìõ –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –¥–æ–≤–µ—Ä–∏—è)"
    )
    await state.set_state(ProfileStates.NAME)

@dp.message(ProfileStates.NAME)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if len(name) < 2 or len(name) > 100:
        await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
        return
    
    await state.update_data(name=name)
    await message.answer(
        "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="–ú—É–∂—Å–∫–æ–π"), types.KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")]
            ],
            resize_keyboard=True
        )
    )
    await state.set_state(ProfileStates.GENDER)

@dp.message(ProfileStates.GENDER)
async def process_gender(message: types.Message, state: FSMContext):
    gender = 'M' if message.text == '–ú—É–∂—Å–∫–æ–π' else 'F'
    await state.update_data(gender=gender)
    
    await message.answer(
        "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏, –∫–æ–≥–æ —Ç—ã –∏—â–µ—à—å:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="–ú—É–∂—á–∏–Ω"), types.KeyboardButton(text="–ñ–µ–Ω—â–∏–Ω")]
            ],
            resize_keyboard=True
        )
    )
    await state.set_state(ProfileStates.SEEKING_GENDER)

@dp.message(ProfileStates.SEEKING_GENDER)
async def process_seeking_gender(message: types.Message, state: FSMContext):
    seeking_gender = 'M' if message.text == '–ú—É–∂—á–∏–Ω' else 'F'
    await state.update_data(seeking_gender=seeking_gender)
    
    await message.answer(
        "üìÖ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(ProfileStates.AGE)

@dp.message(ProfileStates.AGE)
async def process_age(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return
    
    age = int(message.text)
    if age < 18 or age > 100:
        await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 100 –ª–µ—Ç!")
        return
    
    await state.update_data(age=age)
    await message.answer("üèô –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –∂–∏–≤–µ—à—å?")
    await state.set_state(ProfileStates.CITY)

@dp.message(ProfileStates.CITY)
async def process_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("üìù –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ –æ —Å–µ–±–µ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤):")
    await state.set_state(ProfileStates.BIO)

@dp.message(ProfileStates.BIO)
async def process_bio(message: types.Message, state: FSMContext):
    if len(message.text) > 500:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ! –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(bio=message.text)
    await message.answer("üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):")
    await state.set_state(ProfileStates.PHOTOS)

@dp.message(ProfileStates.PHOTOS)
async def process_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ñ–æ—Ç–æ, –∞ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
    if not message.photo:
        if message.text == '/done':
            if not data.get('photos_uploaded'):
                await message.answer("üì∏ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ!")
                return
            
            await message.answer(
                "üéâ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å:\n"
                "- /next - –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã\n"
                "- /edit - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
                "- /matches - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º—ç—Ç—á–∏"
            )
            await state.clear()
            return
        else:
            await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ - —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'user_created' not in data:
        user_data = {
            'telegram_id': message.from_user.id,
            'name': data['name'],
            'gender': data['gender'],
            'age': data['age'],
            'seeking_gender': data['seeking_gender'],
            'city': data['city'],
            'bio': data['bio']
        }
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            check_response = requests.get(f"{API_URL}/api/users/{message.from_user.id}/")
            if check_response.status_code == 200:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                response = requests.patch(
                    f"{API_URL}/api/users/{message.from_user.id}/",
                    json=user_data
                )
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                response = requests.post(f"{API_URL}/api/users/", json=user_data)
            
            response.raise_for_status()
            
        except Exception as e:
            logger.error(f"User creation/update error: {str(e)}")
            await message.answer("üö´ –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
            return
        
        await state.update_data(user_created=True)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file_info = await bot.get_file(photo.file_id)
    file_url = f"https://api.telegram.org/file/bot{os.getenv('TELEGRAM_BOT_TOKEN')}/{file_info.file_path}"
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º telegram_id
        with requests.get(file_url, stream=True) as image:
            files = {
                'image': (file_info.file_path, image.raw, 'image/jpeg'),
                'telegram_id': (None, str(message.from_user.id))
            }
            response = requests.post(
                f"{API_URL}/api/images/",
                files=files
            )
            response.raise_for_status()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
            photos_uploaded = data.get('photos_uploaded', 0) + 1
            await state.update_data(photos_uploaded=photos_uploaded)
            
            await message.answer(
                f"‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! ({photos_uploaded}/5)\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
            )
    except Exception as e:
        logger.error(f"Photo upload error: {str(e)}")
        await message.answer("üö´ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.") 
