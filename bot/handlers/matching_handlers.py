from aiogram import types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import aiohttp
import logging
from bot.config import dp, API_URL
from bot.storage.redis import queue_manager
from bot.storage.minio import download_image_from_minio
import requests
from urllib.parse import urlparse
from bot.logger import logger
import asyncio

logger = logging.getLogger(__name__)

@dp.message(Command("next"))
async def next_profile(message: types.Message):
    user_id = message.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        response = requests.get(f"{API_URL}/api/users/?exclude_user={user_id}")
        if response.status_code != 200:
            logger.error(f"API request failed with status {response.status_code}")
            await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∫–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
            return

        profile = await queue_manager.get_next_profile(user_id)

        if not profile:
            await message.answer("üòî –ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if not profile.get('images'):
            await message.answer("üòî –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")
            return
            
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ MinIO
        image_url = profile['images'][0]['image']
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ URL
        parsed_url = urlparse(image_url)
        # –£–±–∏—Ä–∞–µ–º —Ö–æ—Å—Ç –∏ –≤–µ–¥—É—â–∏–π —Å–ª–µ—à –∏–∑ –ø—É—Ç–∏
        image_path = parsed_url.path.lstrip('/').replace('minio:9000/media/', '')
        
        logger.info(f"Trying to download image from path: {image_path}")
        photo_data = await download_image_from_minio(image_path)
        
        if not photo_data:
            await message.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚ù§Ô∏è", callback_data=f"like_{profile['telegram_id']}"),
                    InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"skip_{profile['telegram_id']}")
                ]
            ]
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É
        await message.answer_photo(
            photo_data,
            caption=f"üë§ {profile['name']}, {profile['age']}\n"
                   f"üèô {profile['city']}\n\n"
                   f"üìù {profile['bio']}",
            reply_markup=keyboard
        )
    except requests.RequestException as e:
        logger.error(f"Network error: {str(e)}")
        await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
    except Exception as e:
        logger.error(f"Error showing profile: {str(e)}")
        await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")

@dp.message(Command("matches"))
async def show_matches(message: types.Message):
    user_id = message.from_user.id
    
    try:
        response = requests.get(f"{API_URL}/api/matches/{user_id}/")
        response.raise_for_status()
        matches = response.json()
        
        if not matches:
            await message.answer("üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º—ç—Ç—á–µ–π.")
            return
        
        for match in matches:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ MinIO
            photo_data = await download_image_from_minio(match['images'][0]['image'])
            
            await message.answer_photo(
                photo_data,
                caption=f"üë§ {match['name']}, {match['age']}\n"
                       f"üèô {match['city']}\n\n"
                       f"üìù {match['bio']}\n\n"
                       f"üí¨ –ù–∞–ø–∏—à–∏—Ç–µ @{match['username']} –≤ Telegram"
            )
            
    except Exception as e:
        logger.error(f"Error showing matches: {str(e)}")
        await message.answer("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º—ç—Ç—á–µ–π! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(lambda c: c.data.startswith(('like_', 'skip_')))
async def process_profile_action(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    action, profile_id = callback_query.data.split('_')
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∞–π–∫ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫
        response = requests.post(
            f"{API_URL}/api/likes/",
            json={
                'from_user': user_id,
                'to_user': profile_id,
                'is_skip': action == 'skip'
            }
        )
        response.raise_for_status()
        
        if action == 'like':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º—ç—Ç—á
            response = requests.get(
                f"{API_URL}/api/matches/check/",
                params={
                    'user1': user_id,
                    'user2': profile_id
                }
            )
            response.raise_for_status()
            is_match = response.json()['is_match']
            
            if is_match:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º—ç—Ç—á–µ
                response = requests.get(f"{API_URL}/api/users/{profile_id}/")
                response.raise_for_status()
                match = response.json()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º—ç—Ç—á–µ
                await callback_query.message.answer(
                    f"üéâ –£ –≤–∞—Å –º—ç—Ç—á —Å {match['name']}!\n"
                    f"üí¨ –ù–∞–ø–∏—à–∏—Ç–µ @{match['username']} –≤ Telegram"
                )
            else:
                await callback_query.message.answer("‚úÖ –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        
        else:  # skip
            await callback_query.message.answer("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞...")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∫–µ—Ç–æ–π
        await callback_query.message.delete()
        
    except requests.exceptions.RequestException as e:
        logger.error(f"API request error: {str(e)}")
        await callback_query.message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–µ–π—Å—Ç–≤–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
    except Exception as e:
        logger.error(f"Error processing profile action: {str(e)}")
        await callback_query.message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!") 
